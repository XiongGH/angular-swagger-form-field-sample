/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';


export interface INullableOrEmpty<T> {
    hasValue?: boolean;
    value?: Date;
    isEmpty?: boolean;
}

export class NullableOrEmpty<T> extends BaseModel implements INullableOrEmpty<T> {
    hasValue: boolean;
    value: Date;
    isEmpty: boolean;

    /** 
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model   
    */
    constructor(values?: any) {
        super();
        if (values) {
            this.setValues(values);
        }
    }

    /** 
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.hasValue = values.hasValue;
            this.value = values.value;
            this.isEmpty = values.isEmpty;
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                hasValue: new FormControl(this.hasValue),
                value: new FormControl(this.value),
                isEmpty: new FormControl(this.isEmpty),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['hasValue'].setValue(this.hasValue);
            this._formGroup.controls['value'].setValue(this.value);
            this._formGroup.controls['isEmpty'].setValue(this.isEmpty);
        }
    }
}
